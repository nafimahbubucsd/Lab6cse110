{"ast":null,"code":"// src/utils/expense-utils.ts\nimport { API_BASE_URL } from \"../constants/constants\";\n// Function to create an expense in the backend. Method: POST\nexport const createExpense = async expense => {\n  const response = await fetch(`${API_BASE_URL}/expenses`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(expense)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to create expense\");\n  }\n  return await response.json(); // Assuming the backend returns the created expense object\n};\n\n// Function to delete an expense in the backend. Method: DELETE\nexport const deleteExpense = async id => {\n  const response = await fetch(`${API_BASE_URL}/expenses/${id}`, {\n    method: \"DELETE\"\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to delete expense\");\n  }\n};\n\n// Function to get all expenses from the backend. Method: GET\nexport const fetchExpenses = async () => {\n  const response = await fetch(`${API_BASE_URL}/expenses`);\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch expenses\");\n  }\n\n  // Assuming the backend returns a JSON array of expenses directly\n  return await response.json();\n};","map":{"version":3,"names":["API_BASE_URL","createExpense","expense","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","deleteExpense","id","fetchExpenses"],"sources":["/Users/nafimahbub/lab5_backup/client/src/utils/expense-utils.ts"],"sourcesContent":["// src/utils/expense-utils.ts\nimport { API_BASE_URL } from \"../constants/constants\"; \nimport { Expense } from \"../types/types\";\n\n// Function to create an expense in the backend. Method: POST\nexport const createExpense = async (expense: Expense): Promise<Expense> => {\n    const response = await fetch(`${API_BASE_URL}/expenses`, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(expense),\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to create expense\");\n    }\n    return await response.json();  // Assuming the backend returns the created expense object\n};\n\n// Function to delete an expense in the backend. Method: DELETE\nexport const deleteExpense = async (id: string): Promise<void> => {\n    const response = await fetch(`${API_BASE_URL}/expenses/${id}`, {\n        method: \"DELETE\",\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to delete expense\");\n    }\n};\n\n// Function to get all expenses from the backend. Method: GET\nexport const fetchExpenses = async (): Promise<Expense[]> => {\n    const response = await fetch(`${API_BASE_URL}/expenses`);\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch expenses\");\n    }\n\n    // Assuming the backend returns a JSON array of expenses directly\n    return await response.json();\n};"],"mappings":"AAAA;AACA,SAASA,YAAY,QAAQ,wBAAwB;AAGrD;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,OAAgB,IAAuB;EACvE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,WAAW,EAAE;IACrDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;EAChC,CAAC,CAAC;EACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC/C;EACA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAE;AACnC,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAOC,EAAU,IAAoB;EAC9D,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,aAAac,EAAE,EAAE,EAAE;IAC3DT,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,IAAI,CAACF,QAAQ,CAACO,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC/C;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,aAAa,GAAG,MAAAA,CAAA,KAAgC;EACzD,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,WAAW,CAAC;EACxD,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC/C;;EAEA;EACA,OAAO,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;AAChC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}